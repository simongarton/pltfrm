type Query {
    getWeather(timestamp: String!): WeatherReport
    getHourlyWeather(timestamp: String!): HourlyWeatherReport
    getInsult(id: Int): InsultData
    getInsultString: String
}

type InsultData {
    insultId: Int
    insult: String
}

type IntervalMeasurement {
    timestamp: String!
    measurement: Float!
}

type WeatherReport {
    FeelsLike: Float
    Temperature: Float
    Clouds: Float
    Uvi: Float
    WindSpeed: Float
    DewPoint: Float
    Pressure: Int
    Weather: String
    Humidity: Int
    WindDeg: Int
    Visibility: Int
    Rain: [IntervalMeasurement!]!
}

type HourlyForecast {
    clouds: Float
    dewPoint: Float
    dt: Int
    feelsLike: Float
    humidity: Int
    pop: Int
    pressure: Int

    temp: Float
    uvi: Float
    visibility: Int

    weather: [WeatherDescription!]!

    windDeg: Float
    windGust: Float
    windSpeed: Float
}

type WeatherDescription {
    id: Int
    main: String
    description: String
    icon: String
}

type HourlyWeatherReport {
    actualTime: String
    forecastHours: [HourlyForecast!]
}

schema {
    query: Query
}